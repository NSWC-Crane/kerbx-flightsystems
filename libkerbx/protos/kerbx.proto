// Protocol format for the kerbx flight system. This defines the messages sent between the avionics computer and the
// flight planning system.
syntax = "proto3";
package kerbx.schema;

// Encodes epoch time. Set as its own message as Time is recorded multiple places
// and must have consistent semantics across all packets. This allows us to change
// semantics in one spot and have it reverberate out.
message Time {
  // Assuming epoch time is always > 2^28
  fixed64 seconds = 1;
}

message WatchDog {
  Time time = 1;
  enum Status {
    ASKALIVE = 0;
    ACKALIVE = 1;
    ASKPOST = 2;
    ACKPOST = 3;
    ASKLAUNCH = 4;
    // ACK LAUNCH means vehicle is in Countdown state
    ACKLAUNCH = 5;
    INFLIGHT = 6;
    LANDED = 7;
    ERROR = 8;
  }
  Status status = 2;
}

message Countdown {
  Time time = 1;
  uint64 seconds_to_launch = 2;
}

message Telemetry {
  Time time = 1;
  double lat = 2;
  double lon = 3;
  double alt = 4;
  double roll = 5;
  double pitch = 6;
  // a.k.a. heading
  double yaw = 7;
  double velocity = 8;
  uint32 mission_plan_step = 9;
}

message Position {
  double lat = 1;
  double lon = 2;
}

message Trigger {
  oneof trigger_condition {
    Time time = 1;
    double alt = 2;
    Position position = 3;
  }
}

message ThrottleLevel {
  float throttle = 1;
}

message Reorient {
  float roll = 1;
  float pitch = 2;
  // a.k.a. heading
  float yaw = 3;
}

// Individual step in the flight plan
message Step {
  uint32 count = 1;

  // todo: Action should be split-out and put in its own message type similar to trigger. Will allow for cleaner
  // more idiomatic match statements and potentially smaller protobuf message sizes.
  enum ActionType {
    // Engage the next stage
    NEXTSTAGE = 0; // Executes next stage
    THROTTLELEVEL = 1; // Adjusts throttle level
    COAST = 2; // Turns off autopilot and does nothing
    REORIENT = 3; // Enables autopilot and reorients aircraft
    // Make sure IGNITE is explicit for safety
    IGNITE = 4; // Executes next stage but makes sure it's an engine...
  }
  ActionType type = 2;
  // Each step only has one action. ThrottleLevel and Reorient are complex actions requiring an extra attribute
  // to be defined. NEXTSTAGE, IGNITE, and COAST are simple actions so do not need specific arguments.
  oneof action {
    ThrottleLevel throttle = 3;
    Reorient position = 4;
  };
  Trigger trigger = 5;
}

// A flight plan is a collection of steps
message FlightPlan {
  uint32 step_count = 1;
  repeated Step steps = 2;
}

// Wrapper around the major message types the KerbX protocol can send. This message allows easy decoding of
// multiple message types over the same socket
message Sheath {
  enum MessageType {
    WATCHDOG = 0;
    COUNTCOWN = 1;
    TELEMETRY = 2;
    FLIGHTPLAN = 3;
    EMPTY = 4;
  }
  MessageType type = 1;
  oneof message {
    WatchDog watchdog = 2;
    Countdown countdown = 3;
    Telemetry telemetry = 4;
    FlightPlan flightplan = 5;
  };
}


